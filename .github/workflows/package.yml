name: Create and deploy Docker image

on:
  push:
    tags:
      - '**' # Trigger the workflow on any tag push

env:
  REGISTRY: ghcr.io # Set the container registry
  IMAGE_NAME: ${{ github.repository }} # Set the image name to the repository name

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    permissions:
      contents: read # Read access to repository contents
      packages: write # Write access to packages
      attestations: write # Write access to attestations
      id-token: write # Write access to ID tokens

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checkout the repository code

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Set up Docker Buildx

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1 # Log in to the container registry
        with:
          registry: ${{ env.REGISTRY }} # Use the registry from the environment variable
          username: ${{ github.actor }} # Use the GitHub actor as the username
          password: ${{ secrets.GITHUB_TOKEN }} # Use the GitHub token as the password

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7 # Extract metadata for Docker
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} # Set the image name
          # Use the tag from the event
          # Use 'release' tag if not in development
          # Use 'prerelease' tag if in development
          tags: |
            type=ref,event=tag 
            type=raw,value=release,enable=${{ !contains(github.ref, 'development') }} 
            type=raw,value=prerelease,enable=${{ contains(github.ref, 'development') }} 

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4 # Build and push the Docker image
        with:
          context: . # Use the current directory as the context
          # Pass the version as a build argument
          build-args: |
            VERSION=${{ github.ref_name }}
          push: true # Push the image to the registry
          # Do not use the 'latest' tag
          flavor: |
            latest=false
          tags: ${{ steps.meta.outputs.tags }} # Use the tags from the metadata step
          labels: ${{ steps.meta.outputs.labels }} # Use the labels from the metadata step
          cache-from: type=gha # Use GitHub Actions cache
          cache-to: type=gha,mode=max # Cache the build to GitHub Actions

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1 # Generate an artifact attestation
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}} # Set the subject name
          subject-digest: ${{ steps.push.outputs.digest }} # Set the subject digest
          push-to-registry: true # Push the attestation to the registry

  deploy-production:
    needs: build-and-push-image # Run after the build-and-push-image job
    name: Deploy to production
    if: ${{ !contains(github.ref, 'development') }} # Only run if not in development
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: install ssh keys
        # Create the SSH key file with appropriate permissions
        # Write the SSH key to the file
        # Add the host to known hosts
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa 
          echo "${{ secrets.ARTIFACT_SSH_KEY }}" > ~/.ssh/id_rsa 
          ssh-keyscan -H ${{ secrets.ARTIFACT_HOST }} > ~/.ssh/known_hosts

      - name: connect and pull
        run: ssh ${{ secrets.USER }}@${{ secrets.ARTIFACT_HOST }} "./javachallengeSkripts/update.sh && exit" # Connect to the host and run the update script

      - name: cleanup
        run: rm -rf ~/.ssh # Remove the SSH keys

  deploy-prerelease:
    needs: build-and-push-image # Run after the build-and-push-image job
    name: Deploy to prerelease
    if: ${{ contains(github.ref, 'development') }} # Only run if in development
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: install ssh keys
        # Create the SSH key file with appropriate permissions
        # Write the SSH key to the file
        # Add the host to known hosts
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa 
          echo "${{ secrets.ARTIFACT_SSH_KEY }}" > ~/.ssh/id_rsa 
          ssh-keyscan -H ${{ secrets.ARTIFACT_HOST }} > ~/.ssh/known_hosts 

      - name: connect and pull
        # Connect to the host and run the update script for development
        run: |
          ssh ${{ secrets.USER }}@${{ secrets.ARTIFACT_HOST }} "./javachallengeSkripts/update_indev.sh && exit" 

      - name: cleanup
        run: rm -rf ~/.ssh # Remove the SSH keys